variables:
  buildConfiguration: 'Release'
trigger:
- master
pr:
- master
pool:
  vmImage: 'windows-2019'
steps:
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 3'
  inputs:
    packageType: sdk
    version: 3.1.x
    installationPath: $(Agent.ToolsDirectory)/dotnet
#- task: UseDotNet@2
#  displayName: 'Use .NET Core sdk 2.1 for sonarscanner'
#  inputs:
#    packageType: sdk
#    version: 2.1.x
#    installationPath: $(Agent.ToolsDirectory)/dotnet
- task: CacheBeta@0
  inputs:
    key: nuget | **/packages.lock.json
    path: $(NUGET_PACKAGES)
  displayName: Cache NuGet packages
- script: dotnet tool install -g dotnet-sonarscanner
  displayName: dotnet install sonarscanner
- script: dotnet sonarscanner begin /k:"cdemi_NewsletterCurator" /o:"cdemi-github" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="$(sonarLogin)" /v:"$(Build.BuildNumber)"
  displayName: dotnet sonarscanner begin 
- script: dotnet build --configuration $(buildConfiguration)
  displayName: dotnet build
- script: dotnet test NewsletterCurator.HTMLScraper.Tests --no-build --no-restore --configuration $(buildConfiguration) --logger trx --collect "Code coverage"
  displayName: dotnet test
# - script: dotnet sonarscanner end /d:sonar.login="$(sonarLogin)"
#   displayName: dotnet sonarscanner end
- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
- script: dotnet publish --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)
  displayName: dotnet publish
- task: PublishBuildArtifacts@1
  displayName: Publishing Artifacts
